package com.example;

import VRAPI.Entities.Contact;
import VRAPI.Entities.ContactDetails;
import VRAPI.Entities.ContactList;
import VRAPI.JSONClasses.JSONContainerOrganisation.JSONContact;
import VRAPI.Keys.TestVertecKeys;
import VRAPI.ResourceControllers.ContactController;
import VRAPI.Util.QueryBuilder;
import VRAPI.XMLClasses.FromContainer.GenericLinkContainer;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpStatusCodeException;

import java.io.IOException;
import java.util.*;

import static java.util.stream.Collectors.toList;
import static junit.framework.Assert.assertNotNull;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertFalse;


public class ContactControllerTest extends ControllerTests {

    private ContactController contactController;

    /**
     * As other tests might modify the organisation link of the given contact,
     * this test has to put twice, to make sure that the orgLink changes
     */
    @Before
    public void setup() {
        QueryBuilder queryBuilder = new QueryBuilder(TestVertecKeys.usr, TestVertecKeys.pwd);
        this.contactController = new ContactController(queryBuilder);
    }

    @Test @Ignore("do")
    public void deleteContacts(){
        List<Long> idsToDel = new ArrayList<>();

        //Anthony Brigginshaw
        idsToDel.add(736855L);
        //Stella Bryant
        idsToDel.add(862588L);
        idsToDel.add(13822657L); //Mark L Busson
        idsToDel.add(18892337L); //Chetan Chomber
        idsToDel.add(788298L); //Ila Neustadt
        idsToDel.add(859691L); //Toby King
        idsToDel.add(20729464L); //Jurgen gainz
        idsToDel.add(22341015L); //Magnus Falk
        idsToDel.add(15315419L); //Paul Krisman
        idsToDel.add(15315645L);
        idsToDel.add(15639865L);
        idsToDel.add(16517417L);
        idsToDel.add(17092298L);
        idsToDel.add(12597026L);
        idsToDel.add(11399332L);
        idsToDel.add(7878333L);
        idsToDel.add(8807762L);
        idsToDel.add(9039509L);
        idsToDel.add(9662175L);
        idsToDel.add(9662101L);
        idsToDel.add(20063881L);

        for(Long id : idsToDel){
            contactController.setActiveField(id,false);
        }
    }

    @Test @Ignore("do")
    public void mergeContacts() throws IOException {
        List<Long> toMerge = new ArrayList<>();
        List<Long> survivors = new ArrayList<>();

        //Damien Charles
        toMerge.add(24069157L);
        survivors.add(23471089L);

        //Martin Carpenter
        toMerge.add(24093304L);
        survivors.add(23464579L);
        //Guido Mengelkamp
        toMerge.add(19440283L);
        survivors.add(20067417L);
        //Duncan Robins
        toMerge.add(10741596L);
        survivors.add(10703664L);
        //Hayden Ian
        toMerge.add(11860698L);
        survivors.add(12005407L);
        //Rauli Hantikainen
        toMerge.add(12526150L);
        survivors.add(16027111L);
        //Gaelle Aotore
        toMerge.add(19534447L);
        survivors.add(19534537L);
        //Ian Spencer
        toMerge.add(25892964L);
        survivors.add(13030700L);

        for(int i = 0; i < toMerge.size(); i ++){
            contactController.mergeContacts(toMerge.get(i), survivors.get(i));
        }


    }

    //======================================================================================================================//
    // GET /contact                                                                                                         //
//======================================================================================================================//

    @Test
    public void canGetContactById() {
        String uri = baseURI + "/contact/" + TESTVertecContact;

        Contact contactRecieved = getFromVertec(uri, ContactList.class).getBody().getContacts().get(0);

        assertEquals("Wrong contact recieved", TESTVertecContact, contactRecieved.getVertecId());
        assertNotNull(contactRecieved.getActive());
        assertNotNull(contactRecieved.getCreationTime());
        assertNotNull(contactRecieved.getModifiedTime());
        assertNotNull(contactRecieved.getOwnedOnVertecBy());
        assertNotNull(contactRecieved.getOwnerId());
        assertNotNull(contactRecieved.getSurname());
        assertNotNull(contactRecieved.getFirstName());
        assertNotNull(contactRecieved.getEmails());
        assertNotNull(contactRecieved.getPhones());
        assertNotNull(contactRecieved.getPosition());

    }

    @Test
    public void canNotGetContactByInvalidId() {
        try {
            String uri = baseURI + "/contact/10934085";
            getFromVertec(uri, Contact.class);
        } catch (HttpClientErrorException e) {
            assertEquals("Wrong status code returned", HttpStatus.NOT_FOUND, e.getStatusCode());
        }
    }

    @Test
    public void canGetListOfContactByIds() {
        String uri = baseURI + "/contact/" + idsAsString(Arrays.asList(TESTVertecContact, 28055081L));
        ContactList contacts = getFromVertec(uri, ContactList.class).getBody();

        contacts.getContacts().forEach(contactRecieved -> {
            assertNotNull(contactRecieved.getActive());
            assertNotNull(contactRecieved.getCreationTime());
            assertNotNull(contactRecieved.getModifiedTime());
            assertNotNull(contactRecieved.getOwnedOnVertecBy());
            assertNotNull(contactRecieved.getOwnerId());
            assertNotNull(contactRecieved.getSurname());
            assertNotNull(contactRecieved.getFirstName());
            assertNotNull(contactRecieved.getEmails());
            assertNotNull(contactRecieved.getPhones());
            assertNotNull(contactRecieved.getPosition());
        });
    }

    @Test
    public void canNotGetListOfContactsIfAnyAreInvalid() {
        try {
            String uri = baseURI + "/contact/" + idsAsString(Arrays.asList(TESTVertecContact, 280550821L, 1287245L));
            ContactList cl = getFromVertec(uri, ContactList.class).getBody();
            assertEquals(1, cl.getContacts().size());
        } catch (HttpClientErrorException e) {
            assertEquals("Wrong status code returned", HttpStatus.NOT_FOUND, e.getStatusCode());
        }
    }

    //======================================================================================================================//
    // PUT /contact                                                                                                         //
//======================================================================================================================//

    @Test
    public void canSetOrganisationLinks() {
        String uri = baseURI + "/contact/" + TESTVertecContact + "/setOrganisationLink/" + TESTVertecOrganisation1;

        Long orgId = putToVertec(uri, Long.class).getBody();

        String uri1 = baseURI + "/oldcontact/" + TESTVertecContact;
        JSONContact contact = getFromVertec(uri1, JSONContact.class).getBody();
        assertEquals("Did not set organisationLink", TESTVertecOrganisation1, contact.getOrganisation());

        assertEquals("Could not modify orglink", TESTVertecOrganisation1, orgId);

        uri = baseURI + "/contact/" + TESTVertecContact + "/setOrganisationLink/" + TESTVertecOrganisation2;
        orgId = putToVertec(uri, Long.class).getBody();


        contact = getFromVertec(uri1, JSONContact.class).getBody();
        assertEquals("Did not set organisationLink back to what it was", TESTVertecOrganisation2, contact.getOrganisation());

        assertEquals("Could not modify orglink", TESTVertecOrganisation2, orgId);
    }

    @Test
    public void doesNotSetOrganisationLinksOfNonContact() {
        tryRequestWithId(TESTRandomID);
    }

    @Test
    public void setOrganisationLinksDoesNotSetNonOrgLink() {
        tryRequestWithId(TESTVertecContact);
    }

    public void tryRequestWithId(Long id) {
        try {
            String uri = baseURI + "/contact/" + id + "/setOrganisationLink/" + TESTRandomID;
            Long orgId = putToVertec(uri, Long.class).getBody();
            assertTrue("No not found exception thrown", false);
        } catch (HttpClientErrorException exception) {
            assertEquals(exception.getStatusCode(), HttpStatus.NOT_FOUND);
        }
    }

    @Test
    public void canContactDetails() {
        Long contact = 13111339L; //a contact on vertec - should find a better one to test (one that has more than 3 kommmittels ideally
        List<Long> kommMittel = new ArrayList<>();
        kommMittel.add(13111348L);
        kommMittel.add(13111351L);
        kommMittel.add(13111352L);

        ContactDetails km = contactController.getContactDetails(kommMittel);

        assertEquals(1, km.getEmails().size());
        assertEquals(2, km.getPhones().size());

        assertTrue(km.getEmails().get(0).getValue().equals("stuart.mills@laterooms.com"));
        assertTrue(km.getPhones().get(0).getValue().equals("+44 161 650 1356"));
        assertTrue(km.getPhones().get(0).getLabel().equals("Phone"));
        assertTrue(km.getPhones().get(1).getValue().equals("+44 7432 717173"));
        assertTrue(km.getPhones().get(1).getLabel().equals("Mobile"));
    }

    @Test
    public void canSetContactToActiveAndInactive() {

        String uri = baseURI + "/contact/" + TESTVertecContact + "/activate";

        Long id = putToVertec(uri, Long.class).getBody();

        Assert.assertEquals("Could not activate Contact before setting it to inactive again!", TESTVertecContact, id);

        uri = baseURI + "/contact/" + TESTVertecContact;

        Contact contact = getFromVertec(uri, ContactList.class).getBody().getContacts().get(0);

        Assert.assertTrue("Contact did not get set to active", contact.getActive());

        id = 0L;

        id = deleteFromVertec(uri, Long.class).getBody();

        Assert.assertEquals("Could not deactivate Contact", TESTVertecContact, id);

        contact = getFromVertec(uri, ContactList.class).getBody().getContacts().get(0);

        assertFalse("Contact did not get set to inactive", contact.getActive());

    }

    @Test
    public void cannotSetRandomIdToActive() {
        Long id = TESTRandomID;
        String uri = baseURI + "/contact/" + id + "/activate";

        try {

            id = putToVertec(uri, Long.class).getBody();
            Assert.assertTrue("Found Contact with random id", false);
        } catch (HttpStatusCodeException e) {
            Assert.assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
        }

    }

    @Test
    public void cannotSetRandomIdToInactive() {
        Long id = TESTRandomID;
        String uri = baseURI + "/contact/" + id;

        try {

            id = deleteFromVertec(uri, Long.class).getBody();
            Assert.assertTrue("Found Contact with random id", false);
        } catch (HttpStatusCodeException e) {
            Assert.assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
        }


    }

    @Test
    @Ignore("Takes too Long")
    public void figuringOutGenericLinkContainers() throws IOException {
        Set<Long> ids = loadIdMap("productionMaps/productionContactMap").keySet();
        System.out.println(ids);

        List<Long> idList = new ArrayList<>();
        idList.addAll(ids);
        List<List<Long>> elaborateContactList = new ArrayList<>();

        int i = 0;
        while (i < idList.size()) {
            for (int j = 0; j < 100; j++) {

                if (i + j == idList.size()) break;
                List<Long> idss = new ArrayList<>();
                idss.add(idList.get(i + j));
                elaborateContactList.add(idss);

            }
            i += 100;
        }

        List<Long> fromLinks = new ArrayList<>();
        List<Long> genericContainers = new ArrayList<>();


        for (List<Long> list : elaborateContactList) {
            int count = 0;
            count++;
            try {
                List<Contact> contacts = contactController.getContactList(list).getContacts();
                fromLinks.addAll(contacts.stream()
                        .map(Contact::getFromLinks)
                        .flatMap(Collection::stream)
                        .collect(toList()));

                genericContainers.addAll(contacts.stream()
                        .map(Contact::getGenericContainers)
                        .flatMap(Collection::stream)
                        .collect(toList()));
            } catch (HttpClientErrorException e) {
                System.out.println("Exception caught on iteration: " + count + " http Exception: " + e);

            } catch (Exception e) {
                System.out.println("Exception caught on iteration: " + count + " Exception: " + e);

            }


        }


        System.out.println("FromLinks: " + fromLinks.size() + ", GenericContainers: " + genericContainers.size());
        System.out.println("FromLinks======:\n" + fromLinks);
        System.out.println("GenericContainers======:\n" + genericContainers);

    }
//
//    @Test
//    @Ignore("Just for research purposes")
//    public void findOutMoreAboutTheAbove() {
//        List<Integer> fromLinks = Arrays.asList(9220242, 966351, 20025655, 11870391, 971465, 11399335, 20066625, 14967033, 17432865, 966338, 2781236, 26071451, 9011351, 9121945, 5124180, 966343, 20025620, 928801, 21770610, 19439886, 19796298, 3612703, 966285, 966333, 10109113, 23576911, 24072543, 9064641, 9355454, 2199573, 24269130, 13136133, 6672240, 26898852, 9179316, 6672154, 3612790, 3133550, 13500562, 7143473, 13127823, 17432913, 958203, 977669, 20025721, 5304343, 19034479, 20066679, 9150671, 3604608, 23253585, 14778550, 14778559, 10109140, 988744, 6672188, 2588779, 24072514, 1364039, 23007504, 3616878, 9179354, 13025439, 19562868, 7397425, 11870445, 10330368, 11219149, 19439949, 11870425, 3604564, 3612755, 20025688, 949472, 15532173, 14815373, 9658604, 17346949, 2519150, 24269070, 958169, 3600463, 6672225, 16855423, 9470193, 10293282, 21770708, 3616948, 18629021, 11227247, 20066750, 8609808, 7799063, 17432964, 1863826, 9756701, 19132849, 3600549, 14733430, 24269284, 6230219, 3379375, 22286797, 972621, 24072658, 3539093, 11657241, 3612823, 11788316, 9703476, 949225, 13111412, 12005410, 9150500, 23261685, 11804700, 9220134, 20025762, 11468808, 949275, 8556595, 3612807, 3739787, 3616899, 9064512, 1162900, 17433011, 2557981, 20066707, 6643934, 13029387, 18883046, 4817037, 9289811, 7930050, 24482232, 26841441, 10293336, 17437125, 3617024, 20066811, 19132907, 22298251, 3539196, 1171185, 20099584, 20066790, 13029410, 14401548, 920553, 8110257, 10309707, 19132920, 4120810, 9064533, 3617008, 920593, 12079205, 1843393, 8057006, 26841419, 11804759, 7930016, 2564291, 3616993, 1978616, 9011303, 16388119, 17760770, 9470054, 9064572, 26214792, 3604674, 5087419, 19132891, 11251800, 20066361, 3604800, 22593620, 1978645, 963441, 27476145, 27259020, 926457, 4120873, 20586543, 984651, 21770329, 22007896, 3600708, 10834312, 24051795, 17883192, 8368478, 4120857, 960577, 3617055, 25596084, 1162463, 15315422, 3604738, 11731342, 9466321, 3334376, 6672318, 8110400, 20066431, 958149, 14733743, 25706695, 9466337, 9396676, 981693, 935837, 10125778, 17428626, 11547109, 3268977, 27398396, 3613040, 20066413, 18669635, 3334368, 11256304, 12599728, 5546291, 8708590, 3084619, 22007850, 8110357, 2089336, 3608923, 8225040, 878190, 878195, 922746, 15921557, 15921564, 941300, 3604815, 9466347, 20066379, 1843614, 6672395, 27078685, 24072432, 6636004, 15536494, 21049548, 10178837, 9953580, 7676418, 17432708, 20242626, 20066497, 6672254, 3613120, 9064714, 965569, 8372724, 12767584, 27377713, 917783, 2671037, 5718471, 3613101, 20066479, 21770454, 945584, 8364514, 24072398, 1855930, 6635974, 10989827, 6672300, 8372698, 11870498, 20066461, 3613084, 8798519, 21770504, 8372684, 2949544, 25776288, 19620023, 3379595, 935825, 21774579, 24408269, 19280032, 17432783, 3039728, 888125, 6672413, 8683845, 24408246, 8303042, 960662, 20066533, 3334400, 21770395, 27209800, 17101021, 944638, 23044289, 3019213, 11805022, 15536401, 25591924, 10625354, 19775706, 19775713, 27242614, 11305285, 8126865, 922996, 917208, 24408203, 2146782, 2089444, 17896225, 26854300, 6672146, 21766987, 11535031, 17756943, 4633158, 17253124, 8897156, 2134568, 20067136, 1163729, 9118341, 15532772, 15090413, 24269697, 20071246, 955703, 25744284, 2134579, 17435579, 1450502, 27308989, 3613204, 3133959, 12006048, 13103854, 6795853, 1966645, 2253110, 13509347, 19563293, 4002320, 1696302, 9220802, 10912413, 933505, 950989, 3613187, 20067079, 22340470, 8708801, 2753042, 957160, 11793044, 957164, 922559, 19440495, 11006693, 17765197, 3621492, 3617394, 13111940, 3781235, 10912495, 16917328, 3433066, 8192561, 6672330, 15315649, 21771037, 2073164, 3613283, 6672389, 5243404, 10654464, 10654469, 12776098, 965560, 22336270, 17433452, 3433048, 24470292, 9220843, 5472826, 16196244, 3613267, 19440453, 4968999, 27309027, 17765220, 10171127, 2073200, 22332193, 26027003, 11793098, 3613249, 966368, 922670, 15532692, 10867419, 13103803, 19563442, 13111888, 7246570, 7246575, 965746, 5481189, 5481194, 21763040, 10125835, 16343661, 17101718, 8364782, 985686, 1162520, 23471092, 5657297, 10002953, 3613357, 6574846, 14750276, 17101737, 23471059, 9359917, 24269790, 27431691, 13103726, 3613341, 19563403, 8364758, 2003631, 8303313, 11412008, 10002982, 12583550, 17781691, 27456284, 20956037, 13509245, 20071413, 3613432, 13111821, 16925643, 12006004, 7246504, 7246509, 5571243, 8364729, 10744434, 1413832, 3613417, 14750261, 1171671, 2003656, 17163230, 22340496, 985923, 13103668, 3613393, 8364699, 3621599, 972347, 16519704, 24191902, 2134733, 20067270, 954149, 972333, 27308891, 1979116, 2564820, 954099, 12526159, 12526164, 942244, 13800404, 3621683, 15778810, 19440164, 986007, 8110965, 920980, 3625790, 15156206, 15533027, 17437195, 20058663, 5157726, 11793321, 1171611, 24093309, 945187, 27689650, 3613487, 17433110, 1843969, 21766767, 936480, 4944747, 13104487, 13894645, 20066840, 954611, 6087544, 966270, 920961, 1171802, 27079357, 7439194, 917037, 3617550, 9442229, 17437242, 13104011, 22008338, 2147173, 19534450, 24789570, 7926600, 1171805, 17433161, 9216966, 9216971, 20066951, 20066916, 21615138, 919362, 12145649, 3613553, 20370038, 20238959, 16004001, 16004008, 6198084, 12456960, 20058711, 18014838, 20296282, 19440207, 3617622, 15315857, 7246602, 7246609, 8922086, 15532932, 27472591, 27456208, 24072707, 8364812, 17609341, 1163722, 10462185, 10761184, 5571376, 5157686, 9204731, 17437309, 20369997, 1171620, 23823085, 4142016, 8057852, 3613620, 20067009, 984661, 6022100, 1622938, 9216802, 10703667, 15631242, 7926765, 1163371, 8111089, 17433237, 4244448, 19428024, 7263219, 10085181, 7930845, 27496965, 27496970, 942207, 942211, 949980, 10310461, 8799024, 949869, 17433275, 19440287, 13792138, 27726357, 9921316, 6231021, 17232565, 950092, 3613577, 1169736, 985839, 10126163, 25891406, 8708942, 13140746, 1163377, 4293525, 19440372, 7246776, 7246781, 3752938, 3556335, 17085154, 8111015, 12145519, 2249668, 19534540, 3105738, 13509419, 17736424, 9466751, 13103920, 19440328, 4424623, 3613658, 1864692, 19428064, 7926671, 1233895, 11584332, 14795550, 3617749, 25869055, 20341453, 9041039, 8455301, 9467033, 16700702, 5252189, 8377463, 1807383, 22873424, 25007473, 9733256, 4682841, 10855618, 3613718, 15533263, 19428612, 3556386, 18572597, 17634602, 9721025, 5157987, 13030636, 18707764, 4383857, 4232310, 979570, 2073643, 22340968, 5575798, 7246936, 7246941, 5158003, 26396117, 16856398, 1807443, 9467101, 8176696, 23680293, 15836353, 3585147, 24577325, 14001290, 3417194, 961309, 19076473, 3601519, 7947297, 5469193, 16852319, 963011, 10777799, 7246864, 7246869, 3417171, 25990636, 5125153, 7095327, 7947275, 13501666, 8111115, 8348689, 4244533, 17438075, 21767492, 3601477, 7631878, 16856454, 7210010, 2032832, 8176889, 27063581, 19428774, 16856466, 17679749, 20981202, 1171680, 27149581, 17184150, 919245, 3851425, 18310542, 948975, 938014, 16856481, 11105339, 954599, 16856493, 8176847, 1844394, 19080605, 24053210, 12579968, 16913860, 22341021, 8176827, 949008, 11592834, 17438173, 1258694, 3679469, 971606, 6672194, 10519674, 9393246, 19768830, 1171686, 8554754, 1807558, 20960754, 23496121, 26932551, 14406663, 949016, 9393264, 971879, 1171689, 8176793, 9061491, 18667004, 15881249, 7439598, 1807610, 935977, 17765861, 4682938, 3548359, 7095453, 3429575, 3585231, 8176775, 14816290, 10519649, 903722, 3605816, 4658501, 5252438, 3106091, 1385750, 15779323, 20296767, 17609746, 6672419, 987352, 1170768, 13243870, 3044667, 17634334, 21763161, 972390, 9176468, 13030873, 1171734, 4683111, 20067353, 16336352, 966752, 5252475, 978570, 1807665, 978575, 971286, 4658541, 24024134, 15545797, 932257, 13104627, 16336337, 1171737, 8176971, 13108726, 917779, 22828144, 4142339, 23069731, 3585402, 917252, 16332219, 9737690, 934036, 1162501, 27518181, 19428452, 16893003, 24069166, 17478724, 17634407, 11732479, 965102, 5252356, 1162505, 953986, 1955147, 21767197, 9467336, 965107, 1171701, 8176934, 18023541, 23204871, 1162511, 23942161, 24269847, 12764585, 21763118, 12957094, 20722778, 1165830, 20067422, 8619504, 965097, 13411776, 959581, 1807719, 23204901, 5539290, 21644497, 3618233, 13030732, 1171665, 1165837, 6370808, 3466671, 2614729, 15512949, 23205062, 1169103, 22353140, 9061682, 13030755, 6672353, 17634473, 21644516, 1807799, 934117, 11552013, 25465919, 11535642, 5809565, 6038944, 22504599, 948916, 3577329, 8177084, 9381204, 948908, 20018427, 17437891, 1170302, 13456672, 1171713, 20063461, 934238, 3560936, 8807765, 24278187, 2614773, 15639868, 5125530, 1171710, 934255, 13030686, 4863386, 15881493, 934044, 9938298, 17437932, 917337, 20018394, 13030704, 5539266, 27366495, 2667999, 2033131, 1169751, 1807851, 7943564, 8038012, 9000590, 17676050, 26417044, 27645864, 9467540, 6792815, 15541997, 11941565, 960370, 2004515, 27981730, 15402730, 25925511, 7943803, 8119918, 1171760, 4113969, 1807887, 14022342, 26634129, 16377574, 27465664, 8218210, 18655039, 12367516, 5252732, 917349, 21768038, 22284158, 17676070, 917366, 1807915, 18814765, 25270206, 9467562, 20027152, 25851921, 18335531, 2754158, 2180705, 8976076, 930172, 928227, 9455319, 13608588, 19425158, 3606130, 5256727, 941021, 1807960, 7878213, 13104780, 11716355, 17524577, 17082201, 3602022, 9467587, 17676201, 3606115, 6370876, 11785968, 14022288, 15161025, 20027249, 959619, 13108909, 9467634, 3606100, 12367590, 5015085, 8349218, 6370827, 3577442, 21665574, 1926778, 973755, 917341, 12764853, 20027205, 3618375, 17614717, 17617100, 17598333, 978282, 6370839, 1844839, 20223826, 21768143, 2029216, 14403164, 8038144, 959954, 978234, 11736638, 3606205, 12367413, 11773716, 15545980, 947149, 3602096, 23394306, 3606189, 5551824, 8038119, 959720, 3618474, 13108850, 20027289, 962573, 17094573, 3901080, 24414152, 3602056, 966060, 25851724, 978273, 2774686, 21768189, 15545944, 14022258, 3606156, 19093410, 5252846, 27551517, 27551522, 20027381, 5273235, 3536631, 932969, 3606259, 24414132, 7878339, 16881609, 8910418, 5994134, 932949, 27801443, 18655214, 24278972, 26146628, 17582050, 3585765, 17909708, 951608, 1165852, 10741373, 9061991, 12367455, 10192510, 3602135, 1163738, 5994173, 7362206, 23115654, 9000569, 9467511, 8058525, 1632004, 8353434, 3334394, 8971877, 8349335, 24078213, 1881842, 2053874, 14816784, 20027332, 13108797, 8353418, 6903446, 5994147, 3606328, 17438222, 18789916, 18667031, 21767754, 16517108, 10160026, 27330227, 7247716, 18892340, 22349384, 926128, 9054120, 3585826, 2033472, 14587902, 23889487, 4376427, 18343490, 3606304, 13109221, 12367837, 27236022, 6672341, 19428874, 3606288, 9439149, 9955241, 12756978, 986041, 18036260, 20358661, 7800642, 959734, 2455328, 1926954, 3536655, 9054170, 21956110, 952596, 13608845, 13109148, 22971929, 3561319, 7948070, 3618669, 8808411, 8460259, 15349644, 13608878, 6379272, 15546251, 9054191, 23262817, 6260532, 9725950, 15542176, 11786182, 7440186, 6672336, 2459483, 9467665, 24078064, 23598829, 4376514, 3278772, 3618765, 17168005, 5658594, 952449, 2545579, 1841082, 15349607, 16373625, 14001993, 15349627, 917604, 20063919, 952392, 12367752, 947960, 9123618, 15484788, 4945905, 20727455, 3602335, 7927761, 4376553, 12367641, 22992631, 9467709, 13109098, 23619296, 9467687, 17524406, 13608826, 921212, 20063885, 10741535, 3586035, 12957455, 2336757, 989527, 3606523, 17438430, 14022421, 24893106, 20027111, 7346099, 16742185, 23647928, 4376477, 7927705, 918253, 12597029, 15161095, 23606927, 11396936, 1976309, 1165870, 22324929, 12093272, 921649, 9054075, 9201538, 973509, 3016667, 3602369, 27330144, 9467756, 21767862, 17913583, 5752748, 10741599, 11786063, 6195297, 27367841, 17430800, 15608046, 11950262, 20064570, 20019511, 1681440, 19065134, 2721825, 17864990, 4151351, 15935739, 5683293, 4474956, 917595, 9488517, 973311, 973316, 9046176, 21768537, 6391939, 7927936, 6672407, 1882174, 3225619, 21162350, 1170330, 2459652, 19622150, 3586079, 896611, 11950237, 22284651, 9050299, 891364, 3225605, 3602433, 973356, 5793892, 22321518, 13801711, 24578380, 21768464, 3586164, 17897821, 23705894, 912000, 22284573, 2254962, 973504, 28047867, 10467534, 2455674, 2054222, 22501639, 9005283, 3586149, 908886, 973484, 10721528, 973489, 13097119, 24078610, 9058540, 4376615, 968942, 973474, 3557471, 11950304, 20703573, 968949, 8296467, 22284606, 27539916, 3606599, 13142209, 9058560, 20019532, 15779983, 15136945, 15575189, 11950286, 20019638, 933011, 20969920, 24074735, 16742527, 973629, 13682789, 11950146, 908955, 6760686, 6572267, 12367927, 3434661, 973526, 8804376, 15059065, 13686854, 22284740, 6760704, 13105248, 973306, 6187205, 18479496, 3602735, 5605621, 16726108, 16726113, 6672209, 13023343, 25778467, 22284802, 12367897, 973341, 14784593, 878199, 3057796, 6621400, 6672368, 15534176, 26356008, 20064649, 973381, 27797783, 5572841, 6672401, 17897940, 21969321, 3606774, 908715, 958795, 15058980, 9123919, 932908, 2033889, 6672234, 27035987, 11942015, 22608282, 6672249, 18479566, 13109281, 11774049, 973301, 22608263, 3586285, 10762370, 11384949, 8452190, 8452195, 6621374, 972811, 13670451, 15534095, 20064725, 973396, 8276130, 9390188, 8988776, 21162418, 26421633, 15575072, 947859, 17783292, 2779347, 3754179, 21162433, 8378505, 8378510, 8296583, 15484949, 21604794, 947838, 21969014, 27424953, 2144556, 12229044, 20019265, 1165864, 940182, 979970, 22284368, 1165843, 1165867, 16697832, 12954077, 7928153, 20027411, 979951, 17651774, 11061647, 18655292, 14002676, 960184, 6760772, 13109746, 976461, 1878326, 23652420, 7244106, 979956, 17909824, 20215837, 22284395, 8898999, 959571, 7215447, 21768307, 2009380, 23652397, 9173458, 17430619, 27031768, 27031773, 7883064, 3463550, 8296756, 20027492, 23394409, 9222622, 22284293, 8415719, 16107949, 951232, 3463513, 11741653, 2001277, 10160642, 6621441, 1882493, 976457, 9218542, 5572927, 3754328, 2144590, 8800749, 1224673, 975856, 16517523, 21768259, 25778431, 20244550, 18892892, 8899059, 17324150, 17913966, 2394463, 9173492, 14817698, 877917, 3369300, 6760732, 9058574, 9226511, 21752030, 21162182, 952321, 8624398, 1318397, 17913515, 24078567, 9316617, 16517491, 9222407, 18012297, 15567235, 17430689, 15894888, 22284488, 19093720, 11061558, 988273, 12065060, 20027567, 5605880, 20019351, 22268155, 962713, 8624430, 17795246, 974870, 9058601, 6621644, 5634564, 5818874, 6672313, 1808816, 11950339, 5818853, 23255286, 11921684, 26339377, 20027535, 6408674, 13109625, 9697584, 932626, 19073256, 879733, 932385, 12507512, 17328325, 1808850, 982129, 22284451, 17455306, 25708617, 2034125, 16517421, 4966806, 11950449, 6760892, 921756, 13023530, 24078479, 962718, 21768359, 926638, 25892967, 3430884, 17455356, 960108, 878209, 956167, 8907137, 13502776, 983595, 878204, 6240865, 20015925, 25852816, 4196934, 2394657, 920432, 21162910, 23534448, 8694412, 878268, 7883385, 20020033, 972606, 13822662, 918117, 24075131, 920355, 5573200, 21769043, 9214614, 25570212, 13113577, 1164946, 23198543, 15715015, 20020000, 25422769, 980146, 21769090, 22285155, 19684129, 25881554, 24075099, 1808934, 1878566, 23571296, 23534429, 17627960, 11385583, 920428, 888780, 921695, 1653334, 8583885, 22285084, 4975110, 888880, 3603047, 888788, 878220, 15346365, 24075069, 8977122, 20020073, 17173348, 1878655, 2255426, 1171787, 888794, 11471569, 4975143, 1170772, 8182292, 19250020, 11860699, 9054975, 921736, 5126717, 9505511, 21592903, 20015944, 3334504, 24075037, 17488768, 920272, 8059395, 1976933, 8981238, 6904344, 13097662, 3334478, 22993891, 20020147, 12458563, 9173515, 2333347, 9124362, 7396096, 2394795, 17533855, 920211, 11782692, 11393603, 1976972, 12278320, 9206296, 949567, 9562640, 8297187, 26168083, 25250597, 952138, 7805658, 8899112, 969298, 17632173, 959317, 23722962, 19499908, 24030154, 9206313, 912187, 4782830, 5561086, 9329224, 3603080, 11950600, 26114878, 2333337, 20568981, 1977002, 3791509, 3334497, 23817177, 9329204, 23571369, 24075186, 27798383, 3537661, 20020221, 24570811, 1809097, 27249483, 930224, 1878722, 12278388, 21511065, 25570181, 20929504, 17431524, 5286588, 21769123, 3537627, 2456282, 25881468, 26114945, 5573284, 2992869, 23677847, 9214583, 17431541, 12577351, 20020177, 1858334, 7158639, 888368, 25668233, 16018421, 22481492, 13675481, 20019772, 21768777, 7658372, 2149172, 23198329, 20060712, 5127005, 2681616, 22481528, 3334491, 10509195, 26114729, 1788731, 22301288, 23833183, 3334473, 1633069, 962240, 10378159, 22481508, 988031, 21768823, 917972, 1170326, 23599706, 917977, 20019828, 12094459, 3334468, 27040482, 8899523, 938559, 9169860, 4782857, 926816, 20060779, 24070710, 968733, 20060761, 16362400, 4258597, 12184545, 919224, 4979492, 20019808, 20343388, 919215, 5286692, 16747406, 22481454, 9567235, 20699720, 21768912, 15567727, 23010016, 7810049, 1809299, 919254, 5569500, 23386859, 973469, 23137007, 11385635, 15342439, 16329593, 15313769, 23325429, 888846, 8837918, 8837923, 6663163, 20019889, 975543, 960449, 944468, 13106026, 16350045, 12335905, 6672204, 11090705, 919287, 5016551, 962386, 895443, 919454, 22899468, 23010031, 12278537, 9055029, 10627871, 15534936, 21768949, 962083, 22284954, 5553049, 24427188, 944416, 4062205, 7957428, 20019971, 6672178, 20019940, 11090817, 24427171, 923526, 24074936, 1171577, 23464582, 24521365, 988322, 929463, 12381017, 12168023, 2014198, 18881233, 5270435, 5245864, 17222387, 8805251, 27691616, 6663074, 16730887, 919450, 25549435, 25549440, 15535344, 949693, 919189, 3615796, 4856902, 919436, 24075624, 1666072, 1633291, 3603493, 2014220, 8666272, 24071545, 6663299, 17214752, 17534227, 17435936, 27409798, 8662185, 5852286, 24071501, 17431858, 17534245, 9313452, 13110504, 5569659, 16727252, 8301653, 6672382, 920189, 20602131, 13135105, 1424430, 23551330, 4975734, 16329929, 8662215, 1171629, 6672363, 9493725, 17870173, 920145, 3615849, 14777523, 9059554, 17431904, 4975649, 23678260, 920225, 5553161, 6663229, 2456701, 17771900, 3615829, 988395, 10317054, 9493754, 6672377, 8977639, 20594008, 17436031, 6761497, 3615814, 6672218, 8977665, 8662262, 11095277, 1535088, 17444213, 21548339, 5270570, 17927531, 9981156, 958962, 1163401, 26250736, 6697483, 19426733, 1162529, 10107928, 23535093, 5303495, 17431970, 22986187, 3402928, 25853210, 24874473, 23252419, 1506487, 10980359, 14777415, 15535182, 23190987, 24071625, 918584, 11779079, 8662069, 8809530, 1776817, 17436096, 7953605, 3615886, 13094012, 17448378, 5090447, 21507473, 18546143, 1813716, 927915, 10169435, 3980529, 24075709, 9202780, 25992558, 1981638, 5270670, 3615978, 16018481, 11938925, 6672323, 26115412, 2563272, 1165846, 1506554, 3611859, 3615962, 25521530, 3615938, 8662134, 957858, 2419936, 6323357, 18390045, 19684399, 27663528, 23551081, 5815647, 20020284, 27348201, 9047435, 16027114, 1165849, 5725510, 20601906, 3599651, 23190649, 1163395, 23600248, 3611951, 3603755, 9702841, 9702846, 1170483, 3104012, 1171638, 5299575, 3616017, 25173164, 14966224, 20020255, 12418452, 5090661, 25906365, 9469351, 17767490, 16940087, 6697458, 19684377, 2034979, 10423776, 919543, 13110668, 1809751, 951992, 9956834, 18787432, 6430003, 17853536, 8687063, 19426447, 919531, 981582, 5553412, 3612015, 23194685, 918858, 2059586, 4525342, 21769238, 24075316, 1171644, 1981823, 14548416, 17251430, 3603794, 18484342, 3603808, 4119898, 9662005, 20601945, 23940102, 4189524, 8842730, 1171581, 11103717, 3599695, 20601925, 6786329, 3334417, 27069469, 4976116, 6909424, 8662278, 11787590, 18005150, 14761341, 17435795, 18508952, 15945060, 3603877, 15777125, 17427613, 11787563, 5979601, 4119980, 5934533, 24071417, 6672290, 1809799, 3612077, 13110617, 12434727, 946777, 15596880, 21142765, 5565951, 973442, 17538213, 3599770, 14949711, 4119953, 21499135, 1699252, 17165493, 11787533, 9493805, 944464, 4119937, 3648907, 10448167, 951883, 21548176, 4120060, 10759532, 951891, 16866512, 25549897, 25549902, 16727349, 5553566, 2485742, 8420689, 17431773, 5852562, 27475064, 4120042, 4144616, 13454615, 9059674, 3423726, 24071310, 4120027, 6909331, 27118709, 13102383, 13110566, 21548201, 17214703, 3603929, 919249, 5569959, 4140493, 919605, 4120008, 12344643, 8166787, 969632, 26676333, 1912292, 24075412, 27077734, 13102794, 15535857, 1809948, 25272200, 10174117, 9662115, 22507362, 982286, 3616319, 982943, 13110984, 926955, 9227936, 2924091, 975366, 8900258, 24194926, 20012846, 18640651, 1809923, 9039512, 27086726, 12779240, 879048, 13111025, 6110843, 1224683, 15531724, 4570743, 20311815, 18640691, 5832303, 963367, 6697530, 3386891, 9379510, 12779267, 17436471, 5545586, 3599992, 1171587, 1170336, 9662219, 13110921, 13139614, 4140655, 975316, 12779156, 3665508, 11788022, 13102741, 16744108, 24436517, 1165840, 3018359, 20057965, 20066161, 945083, 11804395, 24071955, 2588234, 27692999, 5975611, 975422, 12779176, 11804375, 4140628, 25591792, 919152, 25448457, 1445476, 5570094, 6672140, 24076057, 12779198, 10108643, 919143, 1810024, 21712846, 911984, 7659258, 25358114, 20082621, 3616448, 8818194, 2244268, 5054151, 3104418, 5533406, 9662019, 12185132, 15920741, 16859025, 23044049, 20058031, 11419199, 27209489, 19488777, 15945356, 17338273, 7626479, 6094542, 20066223, 1965700, 5725903, 10329603, 10423873, 7958235, 7405272, 20209556, 15629923, 7691992, 13102691, 2506383, 3608222, 6643403, 17739683, 20066182, 7958222, 26206039, 17883046, 16518734, 12185104, 8842804, 15998544, 4140680, 918976, 3612304, 12779136, 5631640, 6672275, 7958206, 920011, 20058110, 5303963, 12185205, 27209557, 3546885, 967485, 26414945, 6672348, 920136, 3600135, 5545628, 3059455, 919875, 20058086, 1871566, 10505846, 24076222, 12803609, 5852818, 5303945, 8900194, 9117268, 981854, 4140774, 8330916, 9715320, 2784976, 17432562, 12185171, 3616479, 5713576, 24436618, 5091002, 12185156, 20066255, 986512, 944918, 23891864, 2563805, 3612371, 924832, 26672794, 3334411, 967231, 6672295, 12345330, 23326328, 4886368, 24522342, 19684926, 4120367, 17436181, 23527040, 12599263, 3612461, 15937519, 17903159, 17088035, 17428032, 9064367, 4120348, 2563912, 17415716, 3600179, 3616543, 17821226, 11251589, 2076471, 963194, 13103084, 14401528, 9125828, 7438220, 24071776, 24899148, 968399, 4829057, 15671256, 17694260, 20065910, 8556484, 3612533, 20729468, 11804659, 2133863, 3616627, 9379789, 17165894, 3424122, 17665605, 17665634, 13103001, 908890, 2133877, 24522275, 27324151, 15630270, 20037230, 6672269, 16338857, 11096012, 891891, 943807, 3616593, 27209464, 7429918, 9437158, 908895, 24071685, 3612506, 10833881, 9437184, 24075801, 988952, 943815, 3538763, 3616695, 943831, 10329887, 12779335, 3612606, 943823, 943827, 5574633, 967964, 13528926, 17436320, 6365177, 953252, 11804464, 13102946, 23326464, 3612587, 27450885, 2477959, 2826126, 3600281, 8703784, 25849392, 3334433, 11804436, 943775, 16887471, 953248, 3334406, 16334681, 963348, 1789868, 15933257, 24075997, 16400209, 935393, 8556365, 8703812, 4980623, 24313529, 3616770, 3612667, 17092331, 18390745, 24071844, 3739628, 5128091, 3608548, 21606060, 966347, 17153760, 26340943, 12779293, 3600367, 17436378, 13102878, 1163413, 16027437, 9662299, 11804526, 6250372, 971428, 10837835, 3612627, 3616733, 12779314, 15920928, 8556412, 968478, 11804484, 25874047, 9662318, 20065998, 1941479, 23551649
//        );
//        Set<Integer> fromLinkSet = new HashSet<>();
//        fromLinkSet.addAll(fromLinks);
//        System.out.println("===========Yoooooooooo================");
//        System.out.println("Listsize: " + fromLinks.size() + " setsize: " + fromLinkSet.size());
//        System.out.println("Set: " + fromLinkSet);
//
//    }

    @Test
    public void canSetfromContainers() {
        List<Long> glcIds = Arrays.asList(958149L, 8110400L, 20066431L);

        List<Long> originalgenericContainers = contactController.getGenericLinkContainers(glcIds).stream()
                .map(glc -> glc.getFromContainer().getObjref())
                .collect(toList());

        Long survivor = TESTVertecContact;

        //set all glcs to point to test contact
        Long newID = contactController.setFromContainerOfGLC(survivor, glcIds).getBody();

        assertEquals("setgenericContainers did not return correctly", TESTVertecContact, newID);

        //check whether changes have been applied
        List<Long> newgenericContainers = contactController.getGenericLinkContainers(glcIds).stream()
                .map(glc -> glc.getFromContainer().getObjref())
                .collect(toList());

        for (Long id : newgenericContainers) {
            assertEquals("One of the ids didnt get set", TESTVertecContact, id);
        }

        //set links of glc-s back to original based on original genericContainers one-by-one
        for (int i = 0; i < glcIds.size(); i++) {

            Long id1 = 0L;
            id1 = contactController.setFromContainerOfGLC(originalgenericContainers.get(i), Collections.singletonList(glcIds.get(i))).getBody();
            assertEquals("set fromlinck back to original did not return correctly", originalgenericContainers.get(i), id1);
        }

        //check that they have been set back to the original ones
        newgenericContainers = contactController.getGenericLinkContainers(glcIds).stream()
                .map(glc -> glc.getFromContainer().getObjref())
                .collect(toList());

        assertEquals("Not all links have been returned", glcIds.size(), newgenericContainers.size());

        for (int j = 0; j < newgenericContainers.size(); j++) {
            assertEquals("Did not set link" + j + " back to original", originalgenericContainers.get(j), newgenericContainers.get(j));
        }
    }


    @Test
    public void canSeLinks() {
        Long newId = TESTVertecContact;
        Long oldId = 1881841L; //actual contact on vertec take care

        List<Long> glcIds = Arrays.asList(1807337L, 8662018L); //these glcs are linked to oldId
        List<GenericLinkContainer> glcs = contactController.getGenericLinkContainers(glcIds);

        //set links to point to surviving contact
        Long id = contactController.replaceLinks(newId, oldId, glcs).getBody();

        assertEquals("replaceLinks did not return correctly", newId, id);

        List<GenericLinkContainer> updatedGLCs = contactController.getGenericLinkContainers(glcIds);

        //check its been done
        for (GenericLinkContainer glc : updatedGLCs) {
            assertTrue("Did not update new link", glc.getLinks().getObjlist().getObjref().contains(newId));
        }

        //reset to point to original
        Long revertedId = contactController.replaceLinks(oldId, newId, updatedGLCs).getBody();

        assertEquals("Resetting replaceLinks did not return correctly", oldId, revertedId);

        List<GenericLinkContainer> revertedGLCs = contactController.getGenericLinkContainers(glcIds);

        //check it worked
        for (GenericLinkContainer glc : revertedGLCs) {
            assertTrue("Reseting did not update new link", glc.getLinks().getObjlist().getObjref().contains(oldId));
        }


    }


}
